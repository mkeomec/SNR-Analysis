tab_151_7 <- matrix(table(pathway5_group$q0151_0007))
names(tab_151_7) <- 'iPad'
tab_151_7
tab_151_8 <- matrix(table(pathway5_group$q0151_0008))
names(tab_151_8) <- 'personal amp'
tab_151_8
tab_151_9 <- matrix(table(pathway5_group$q0151_0009))
names(tab_151_9) <- 'closed captioning'
tab_151_9
## Where did you get your hearing devices
tab_143 <- matrix(table(pathway5_group$q0143),dimnames=list(c('hospital','family doctor office','audiologists office','retail store','none of these'),'Do you use hearing aids or other hearing devices?'))
return(list(tab_137,tab_141,tab_142,tab_151_1,tab_151_2,tab_151_3,tab_151_4,tab_151_5,tab_151_6,tab_151_7,tab_151_8,tab_151_9,tab_143))
#return(list(tab_137,tab_141,tab_142,tab_151_1,tab_151_2,tab_151_3,tab_151_4,tab_151_5,tab_151_6,tab_151_7,tab_151_9))
}
#Plot tables with probabilities for Pathway Questions and hearing loss questions
## Q46 and hcat
grid.table(round(100*prop.table(table(US_data$hcat,US_data$q0046)),digits=1))
grid.table(round(100*prop.table(table(CAN_data$hcat,CAN_data$q0046)),digits=1))
grid.table(round(100*prop.table(table(AUS_data$hcat,AUS_data$q0046)),digits=1))
grid.table(round(100*prop.table(table(UK_data$hcat,UK_data$q0046)),digits=1))
# hcat and q32
grid.table(round(100*prop.table(table(US_data$hcat,US_data$q0032)),digits=1))
grid.table(round(100*prop.table(table(CAN_data$hcat,CAN_data$q0032)),digits=1))
grid.table(round(100*prop.table(table(AUS_data$hcat,AUS_data$q0032)),digits=1))
grid.table(round(100*prop.table(table(UK_data$hcat,UK_data$q0032)),digits=1))
# hcat and q42
grid.table(round(100*prop.table(table(US_data$hcat,US_data$q0042)),digits=1))
grid.table(round(100*prop.table(table(CAN_data$hcat,CAN_data$q0042)),digits=1))
grid.table(round(100*prop.table(table(AUS_data$hcat,AUS_data$q0042)),digits=1))
grid.table(round(100*prop.table(table(UK_data$hcat,UK_data$q0042)),digits=1))
pathway_US <- pathway_response(US_data)
#pathway_CAN <- pathway_response(CAN_data)
#pathway_AUS <- pathway_response(AUS_data)
#pathway_UK <- pathway_response(UK_data)
### MANUAL ASSIGNMENT. Assign each country for table plotting
data <- pathway_US
#data <- pathway_CAN
#data <- pathway_AUS
#data <- pathway_UK
# Plot tables for each country
table_plot1 <- tableGrob(as.data.frame(data[1]))
table_plot2 <- tableGrob(as.data.frame(data[2]))
table_plot3 <- tableGrob(as.data.frame(data[3]))
table_plot4 <- tableGrob(as.data.frame(data[4]))
table_plot5 <- tableGrob(as.data.frame(data[5]))
table_plot6 <- tableGrob(as.data.frame(data[6]))
table_plot7 <- tableGrob(as.data.frame(data[7]))
table_plot8 <- tableGrob(as.data.frame(data[8]))
table_plot9 <- tableGrob(as.data.frame(data[9]))
table_plot10 <- tableGrob(as.data.frame(data[10]))
table_plot11 <- tableGrob(as.data.frame(data[11]))
table_plot12 <- tableGrob(as.data.frame(data[12]))
table_plot13 <- tableGrob(as.data.frame(data[13]))
## Plots must be manually run in console
grid.arrange(table_plot1,table_plot2,table_plot3,table_plot13)
grid.arrange(table_plot4,table_plot5,table_plot6,table_plot7,table_plot8,table_plot9,table_plot10)
#
# Run regression model seclection on all countries data
# Combine all country's datasets
AUS_data$country <- 'AUS'
US_data$country <- 'US'
UK_data$country <- 'UK'
CAN_data$country <- 'CAN'
global_data <- rbind.fill(AUS_data,CAN_data)
global_data <- rbind.fill(global_data,UK_data)
global_data <- rbind.fill(global_data,US_data)
boot_ormod_data <- global_data[,c('hcat','q0002','q0003','q0008','q0012','q0013','q0018_0001','q0032','q0042','q0046','country')]
boot_ormod_data <-  boot_ormod_data[complete.cases(boot_ormod_data),]
#Generate model using all variables
boot_ormod_all <- polr(hcat~factor(q0002)+factor(q0003)+factor(q0008) +factor(q0012)+factor(q0013)+ factor(q0018_0001)+factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046)+country, data = boot_ormod_data, Hess=TRUE)
#Dredge analyzes all models under all variable combinations and selects the best fitting model
#dredge_results <- dredge(boot_ormod_all)
#subset(dredge_results,delta==0)
#Use the best model from dredge and calculate significance values
ormod_best <- polr(hcat~factor(q0002)+factor(q0003)+factor(q0008)+ +factor(q0012)+factor(q0013)+factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046)+country, data = boot_ormod_data, Hess=TRUE)
#Show model results
dredge_ortable <- coef(summary(ormod_best))
p <- pnorm(abs(dredge_ortable[,"t value"]),lower.tail=FALSE)*2
dredge_ortable <- cbind(dredge_ortable,'p value'=p)
dredge_ortable
#Plot cross tabs
grid.table(table(boot_ormod_data$hcat,boot_ormod_data$q0046))
grid.table(table(boot_ormod_data$hcat,boot_ormod_data$q0042))
grid.table(table(boot_ormod_data$hcat,boot_ormod_data$q0032))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$country)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$q0046,boot_ormod_data$country)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0046)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0042)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0032)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0002)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0003)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0008)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0012)),digits=1))
grid.table(round(100*prop.table(table(boot_ormod_data$hcat,boot_ormod_data$q0013)),digits=1))
grid.table(round(100*addmargins(prop.table(table(boot_ormod_data$q0046,boot_ormod_data$country))),digits=1))
grid.table(round(100*addmargins(prop.table(table(boot_ormod_data$hcat,boot_ormod_data$country))),digits=1))
#Plot table of country by pathway using row percentages
df=(table(boot_ormod_data$hcat,boot_ormod_data$country))
df/rowSums(df)
grid.table(df/rowSums(df))
# Examine country effect on HCAT
ormod_best <- polr(hcat~factor(boot_ormod_data$country,levels=c('US','AUS','UK','CAN')), data = boot_ormod_data, Hess=TRUE)
dredge_ortable <- coef(summary(ormod_best))
p <- pnorm(abs(dredge_ortable[,"t value"]),lower.tail=FALSE)*2
dredge_ortable <- cbind(dredge_ortable,'p value'=p)
dredge_ortable
#Propensity Score and Malanobus distance matching
# Change country code
AUS_data$country <- 0
US_data$country <- 1
UK_data$country <- 0
CAN_data$country <- 0
AUS_data$country_id <- 'AUS'
US_data$country_id <- 'US'
UK_data$country_id <- 'UK'
CAN_data$country_id <- 'CAN'
global_data <- rbind.fill(AUS_data,CAN_data)
global_data <- rbind.fill(global_data,UK_data)
global_data <- rbind.fill(global_data,US_data)
global_data_complete <- global_data[,c('country','country_id','hcat','q0002','q0003','q0005','q0008','q0010','q0032','q0034','q0036','q0042','q0046')]
global_data_complete <-  global_data_complete[complete.cases(global_data_complete),]
ps <- glm(factor(country)~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010)+factor(q0032)+factor(q0036)+factor(q0042)+factor(q0046),data=global_data_complete, family=binomial)
summary(ps)
global_data_complete$psvalue <- predict(ps,type='response')
US_data_ps <- global_data_complete[which(global_data_complete$country==1),]
other_data_ps<- global_data_complete[which(global_data_complete$country==0),]
par(mfrow=c(1,2))
hist(US_data_ps$psvalue,breaks=30)
hist(other_data_ps$psvalue,breaks=30)
histbackback(split(global_data_complete$psvalue,global_data_complete$country),main='Propensity score before matching',xlab=c('control','treatment'))
## MATCHING using different methods
#Calculate imbalance
xBalance(country~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010)+factor(q0032)+factor(q0034)+factor(q0036)+factor(q0042)+factor(q0046),data=global_data_complete,report=c('chisquare.test'))
##Match using propensity scores, near-neighbor. ratio =1:1
#m.prop<-matchit(factor(country)~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010)+factor(q0032)+factor(q0034)+factor(q0036)+factor(q0042)+factor(q0046),data=global_data_complete,method='nearest',ratio=1)
#summary(m.prop)
#match.data=match.data(m.prop)
#xBalance(country~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010)+factor(q0032)+factor(q0034)+factor(q0036)+factor(q0042)+factor(q0046),data=match.data,report=c('chisquare.test'))
#histbackback(split(match.data$psvalue,match.data$country),main='Propensity score after matching',xlab=c('control','treatment'))
#match_ormod_all <- polr(hcat~factor(q0002)+factor(q0003)+factor(q0008) +factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046)+country_id, data = match.data, Hess=TRUE)
##Dredge analyzes all models under all variable combinations and selects the best fitting model
#dredge_match <- dredge(match_ormod_all)
#subset(dredge_match,delta==0)
##Use the best model from dredge and calculate significance values
#ormod_best <- polr(hcat~factor(q0003)+factor(q0042, levels = c(2, 1)) +factor(q0046)+country_id, data = match.data, Hess=TRUE)
#summary(ormod_best)
#dredge_ortable <- coef(summary(ormod_best))
#p <- pnorm(abs(dredge_ortable[,"t value"]),lower.tail=FALSE)*2
#dredge_ortable <- cbind(dredge_ortable,'p value'=p)
#dredge_ortable
#Match using propensity scores, near-neighbor, calpier=.25
m.mahal<-matchit(factor(country)~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010)+factor(q0032)+factor(q0034)+factor(q0036)+factor(q0042)+factor(q0046),data=global_data_complete,method='nearest',caliper=.25)
summary(m.mahal)
match.data=match.data(m.mahal)
xBalance(country~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010)+factor(q0032)+factor(q0034)+factor(q0036)+factor(q0042)+factor(q0046),data=match.data,report=c('chisquare.test'))
histbackback(split(match.data$psvalue,match.data$country),main='Propensity score after matching',xlab=c('control','treatment'))
#Generate model using all variables
match_ormod_all <- polr(hcat~factor(q0002)+factor(q0003)+factor(q0008) +factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046)+country, data = match.data, Hess=TRUE)
#Dredge analyzes all models under all variable combinations and selects the best fitting model
dredge_match <- dredge(match_ormod_all)
subset(dredge_match,delta==0)
ormod_best <- polr(hcat~factor(q0003)+factor(q0032)+factor(q0042, levels = c(2, 1)) +factor(q0046)+country_id, data = match.data, Hess=TRUE)
summary(ormod_best)
dredge_ortable <- coef(summary(ormod_best))
p <- pnorm(abs(dredge_ortable[,"t value"]),lower.tail=FALSE)*2
dredge_ortable <- cbind(dredge_ortable,'p value'=p)
dredge_ortable
##Match using propensity and mahalanobis matching
## Must dummy code categorical variables
#global_test <- global_data_complete[-2]
#global_dummy <- dummy_cols(global_data_complete,select_columns=c('hcat','q0003','q0008','q0010','q0034','q0036','q0046'),remove_first_dummy = TRUE)
#m.mahal<-matchit(country~(q0002)+(q0005)+(q0032)+(q0042)+hcat_1+hcat_4+hcat_3+q0003_3+q0003_2+q0003_4+q0003_7+q0003_6+q0008_3+q0008_5+q0008_2+q0008_1+q0010_3+q0010_7+q0010_2+q0010_4+q0010_6+q0010_1+q0034_2+q0034_3+q0036_2+q0036_4+q0036_3+q0046_2+q0046_1+q0046_5+q0046_4+psvalue,data=global_dummy, mahvars=c('q0002','q0005','q0032','q0042','psvalue','hcat_1','hcat_4','hcat_3','q0003_3','q0003_2','q0003_4','q0003_7','q0003_6','q0008_3','q0008_5','q0008_2','q0008_1','q0010_3','q0010_7','q0010_2','q0010_4','q0010_6','q0010_1','q0014_3','q0014_2','q0014_6','q0014_4','q0014_5','q0014_7','q0034_2','q0034_3','q0036_2','q0036_4','q0036_3','q0046_2','q0046_1','q0046_5','q0046_4'), caliper=0.25,replace=FALSE,distance='mahalanobis')
#summary(m.mahal)
#match.data=match.data(m.mahal)
#xBalance(country~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010)+factor(q0032)+factor(q0034)+factor(q0036)+factor(q0042)+factor(q0046),data=match.data,report=c('chisquare.test'))
#histbackback(split(match.data$psvalue,match.data$country),main='Propensity score after matching',xlab=c('control','treatment'))
##Generate model using all variables
#match_ormod_all <- polr(hcat~factor(q0002)+factor(q0003)+factor(q0008) +factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046)+country, data = match.data, Hess=TRUE)
#Dredge analyzes all models under all variable combinations and selects the best fitting model
#dredge_match <- dredge(match_ormod_all)
#subset(dredge_match,delta==0)
#ormod_best <- polr(hcat~factor(q0003)+factor(q0032)+factor(q0042, levels = c(2, 1)) +factor(q0046)+country_id, data = match.data, Hess=TRUE)
#summary(ormod_best)
#dredge_ortable <- coef(summary(ormod_best))
#p <- pnorm(abs(dredge_ortable[,"t value"]),lower.tail=FALSE)*2
#dredge_ortable <- cbind(dredge_ortable,'p value'=p)
#dredge_ortable
US_train_data <- match.data[match.data$country==1,]
Other_train_data <- match.data[match.data$country==0,]
#Replicate US-data boot strap model selection. Limited to 100 times because potential error
#boot_out <- replicate(100,model_boot_split(US_train_data))
#Replicate other country-data boot strap model selection. Limited to 100 times because potential error
#boot_out <- replicate(250,model_boot_split(Other_train_data))
#boot_results <- as.data.frame(matrix(unlist(boot_out), byrow=T,,6))
#names(boot_results) = c('q0002','q0005','q0010','q0032','q0042','q0046')
#boot_results
#boot_results <-  data.frame(lapply(boot_results, as.character),stringsAsFactors=FALSE)
#boot_results[boot_results=='+'] <- 1
#boot_results <- data.frame(lapply(boot_results, as.numeric))
#colSums(boot_results,na.rm = T)
train1 <- c(13,2,44,100,82,100)
names(train1) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train2 <- c(22,0,41,100,88,100)
names(train2) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train3 <- c(25,2,42,100,82,100)
names(train3) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train4 <- c(14,3,41,100,85,100)
names(train4) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train5 <- c(19,1,42,100,77,100)
names(train5) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train6 <- c(13,2,44,100,82,100)
names(train6) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train7 <- c(22,0,41,100,88,100)
names(train7) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train8 <- c(25,2,42,100,82,100)
names(train8) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train9 <- c(14,3,41,100,85,100)
names(train9) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
train10 <- c(19,1,42,100,77,100)
names(train10) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
US_train <- rbind(train1,train2,train3,train4,train5,train6,train7,train8,train9,train10)
US_train <- colSums(US_train)
US_train <- US_train/1000
train1 <- c(4,20,13,99,36,100)
train2 <- c(411,366,105,496,303,500)
train3 <- c(211,191,40,248,149,250)
train4 <- c(208,182,51,248,156,250)
Other_train <- rbind(train1,train2,train3,train4)
Other_train <- colSums(Other_train)
Other_train <- Other_train/1100
names(Other_train) <- c('q0002','q0005','q0010','q0032','q0042','q0046')
#Based on model selection, use 'q0002','q0005','q0010','q0032','q0042','q0046' in final model
final_mod<- polr(hcat~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010) +factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046)+country, data = US_train_data, Hess=TRUE)
summary(final_mod)
final_mod_US <- coef(summary(final_mod))
p <- pnorm(abs(final_mod_US[,"t value"]),lower.tail=FALSE)*2
final_mod_US <- cbind(final_mod_US,'p value'=p)
final_mod_US
final_mod<- polr(hcat~factor(q0002)+factor(q0003)+factor(q0005)+factor(q0010) +factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046)+country, data = Other_train_data, Hess=TRUE)
summary(final_mod)
final_mod_Other <- coef(summary(final_mod))
p <- pnorm(abs(final_mod_Other[,"t value"]),lower.tail=FALSE)*2
final_mod_Other <- cbind(final_mod_Other,'p value'=p)
final_mod_Other
#hist(unlist(boot_out[seq(0,length(boot_out),20)]))
#mean(unlist(boot_out[seq(0,length(boot_out),20)]))
#quantile(unlist(boot_out[seq(0,length(boot_out),20)]))
#q0001- Participant ID
#q0002- Gender; 1=F, 2=M
#q0003- Age: 1= under 60; 2= 60-64; 3=65-69; 4= 70-74; 5= 75-79; 6= 80-84' 70= 85+
#q0005- marital status: 1=married/committed relationship; 2= single/divorced/widowed/never married
#q0008- highest grade completed: 1= none; 2=elementary; 3= secondary; 4-undergrad; 5= graduate
#q0010- household income
#q0012- do health benefits cover cost of a hearing test
#q0013- do health benefits cover cost of hearing aids
#q0014- race: 1= American indian; 2= Asian; 3= White; 4= Native Hawaiian/PI; 5= Black/AA; 6=More than one race
#q0018_0001- In general, would you say your health is: 1= Exellent, 2= Very Good, 3= Good, 4=Fair, 5=Poor
#q0020_0001- In general would you say your quality of life is: 1=Excellent, 5 = Poor
#q0030_0015- Have you ever been told by a doctor or HCP that you have hearing loss?
#q0030_0016- Have you ever been told by a doctor or HCP that you have vision loss?
#q0030_0017- Have you ever been told by a doctor or HCP that you have balance problems or dizziness?
#q0032- Are you deaf or do you have a significant hearing difficulty? 1=Yes; 2=No
#q0034- Do your ever get noises such as ringing or buzzing in your ears or head (tinnitus) that last         more than 5 minutes? (If yes) Do you get these noises some of the time, most of the time, or         all of the time? 1=No; 2=Yes, some of the time; 3= Yes, most or all of the time
#q0036- Have you ever worked in a place that was so noisy you had to shout to be heard? 1=No; 2= Yes,         < 1 year; 3=Yes, for 1-5 years; 4= Yes, > 5 years
#q0042- Do you have a hearing problem now? 1= Yes; 2= No
#q0046- Pathway question: 1-3= No hearing problem; 4= Hearing loss, no treatment; 5= Hearing loss + treatment
#boot_out <- replicate(100,model_boot_split(global_data_complete))
# Bootstrap model selection when split into train and test set. Use prediction correlation as best model parameter.
# Split data into train and test sets.
global_model_boot_split <- function(data){
##Create model with all variables
boot_ormod_data <- data[,c('hcat','q0002','q0005','q0010','q0032','q0034','q0036','q0042','q0046')]
boot_ormod_data <-  boot_ormod_data[complete.cases(boot_ormod_data),]
samp.split2 <- sample.split(boot_ormod_data$q0002, SplitRatio = .5)
mangroup2 <- subset(boot_ormod_data, samp.split2 == TRUE) #Will use this group to generate model after taking out NA's for BEPTA
testgroup2  <- subset(boot_ormod_data, samp.split2 == FALSE) #Will test model on them after it's created
identical(testgroup2, mangroup2)
# Input total model with all predictors
#boot_ormod_all <- polr(hcat~factor(q0002) +factor(q0012)+factor(q0013)+ factor(q0018_0001)+factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046), data = mangroup2, Hess=TRUE)
boot_ormod_all <- polr(hcat~factor(q0002)+factor(q0005)+factor(q0010)+factor(q0032)+ factor(q0042)+factor(q0046),     data = mangroup2, Hess=TRUE)
dredge_results <- dredge(boot_ormod_all)
dredge_best <- get.models(dredge_results, subset = 1)[[1]]
dredge_list_add <-dredge_results[1,c('factor(q0002)','factor(q0005)','factor(q0010)','factor(q0032)','factor(q0042)','factor(q0046)')]
if (exists('dredge_list')){
dredge_list[nrow(dredge_list)+1,] <- dredge_list_add
}else{
dredge_list <- dredge_list_add
}
# Test model prediction
testgroup2.predictions <- predict(dredge_best,testgroup2)
#Now we can get the root mean squared error, a standardized measure of how off we were with our predicted values:
results2 <- cbind(testgroup2.predictions,testgroup2$hcat)
colnames(results2) <- c('pred','real')
results2 <- as.data.frame(results2)
#plot(results2$real,results2$pred)
cor <- cor(results2$real, results2$pred, use='complete.obs', method='pearson')
#out=cor
out=dredge_list
}
#boot_out <- replicate(1000,global_model_boot_split(global_data))
#boot_results <- as.data.frame(matrix(unlist(boot_out), byrow=T,,6))
#names(boot_results) = c('q0002','q0005','q0010','q0032','q0042','q0046')
#boot_results <-  data.frame(lapply(boot_results, as.character),stringsAsFactors=FALSE)
#boot_results[boot_results=='+'] <- 1
#boot_results <- data.frame(lapply(boot_results, as.numeric))
#colSums(boot_results,na.rm = T)
#q0002 q0005 q0010 q0032 q0042 q0046
# 959   290   817  1000  1000  1000
## Split global data and use global model to predict HCAT.
boot_ormod_data <- global_data[,c('hcat','q0002','q0003','q0010','q0032','q0042','q0046','country_id')]
boot_ormod_data <-  boot_ormod_data[complete.cases(boot_ormod_data),]
set.seed(123)
samp.split2 <- sample.split(boot_ormod_data$q0002, SplitRatio = .5)
mangroup2 <- subset(boot_ormod_data, samp.split2 == TRUE) #Will use this group to generate model after taking out NA's for BEPTA
testgroup2  <- subset(boot_ormod_data, samp.split2 == FALSE) #Will test model on them after it's created
identical(testgroup2, mangroup2)
# Input total model with all predictors
#boot_ormod_all <- polr(hcat~factor(q0002) +factor(q0012)+factor(q0013)+ factor(q0018_0001)+factor(q0032, levels = c(2,1)) + factor(q0042, levels = c(2, 1)) +factor(q0046), data = mangroup2, Hess=TRUE)
boot_ormod_all <- polr(hcat~factor(q0002)+factor(q0003)+factor(q0010)+factor(q0032)+ factor(q0042)+factor(q0046)+factor(country_id), data = mangroup2, Hess=TRUE)
summary(boot_ormod_all)
# Test model prediction
testgroup2.predictions <- predict(boot_ormod_all,testgroup2)
#Now we can get the root mean squared error, a standardized measure of how off we were with our predicted values:
results2 <- cbind(testgroup2.predictions,testgroup2$hcat)
colnames(results2) <- c('pred','real')
results2 <- as.data.frame(results2)
table(results2)
# Calculate difference between predited and actual
results2$diff <- results2$pred-results2$real
results2$diff <- abs(results2$diff)
table(results2$diff)
# Import Research Now data sets. NOTE: column names have to be shifted because some surveys contain the first question, Where do you reside.
UK_RN_data<- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Work/UW BandBlab/Studies/eHearing/U.K. eHearing Study - Online Panel Survey.sav", to.data.frame=TRUE)
UK_RN_data$country_id <- 'UK'
UK_state_RN_data <- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Kelly and Michael/England eHearing Study - Online Panel Survey.sav", to.data.frame=TRUE)
UK_state_RN_data$country_id <- 'UK'
London_RN_data <- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Kelly and Michael/Greater London eHearing Study - Online Panel Survey.sav", to.data.frame=TRUE)
London_RN_data$country_id <- 'UK'
AUS_RN_data <- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Work/UW BandBlab/Studies/eHearing/2018 SPSS datasets/eHearing Study-Australia-Panel.sav", to.data.frame=TRUE)
AUS_RN_data$country_id <- 'AUS'
AUS_state_RN_data <- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Work/UW BandBlab/Studies/eHearing/2018 SPSS datasets/eHearing Study - NSW - Panel.sav", to.data.frame=TRUE)
AUS_state_RN_data$country_id <- 'AUS'
CAN_RN_data<- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Work/UW BandBlab/Studies/eHearing/2018 SPSS datasets/eHearing Study - CanadaPanel.sav", to.data.frame=TRUE)
CAN_RN_data$country_id <- 'CAN'
CAN_state_RN_data<- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Work/UW BandBlab/Studies/eHearing/2018 SPSS datasets/eHearing Study of Alberta_BC_Quebec_Other_Canada_Panel - 2.sav", to.data.frame=TRUE)
CAN_state_RN_data$country_id <- 'CAN'
names(CAN_RN_data) <- names(CAN_state_RN_data[-11])
US_RN_data <- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Work/UW BandBlab/Studies/eHearing/2018 SPSS datasets/eHearing Study - USA - Panel.sav", to.data.frame=TRUE)
US_RN_data$country_id <- 'US'
US_state_RN_data <- read.spss("C:/Users/cwbishop/Documents/dropbox/Dropbox/Work/UW BandBlab/Studies/eHearing/2018 SPSS datasets/eHearing Study - USA WA - Panel.sav", to.data.frame=TRUE)
US_state_RN_data$country_id <- 'US'
#q0003  in "USA WA" Research now dataset is are you a current resident of WA. Remove this Question
US_state_RN_data <- US_state_RN_data[-13]
names(US_RN_data) <- names(CAN_state_RN_data[-11])
names(US_state_RN_data) <- names(CAN_state_RN_data[-11])
table(CAN_RN_data$q0046)
table(CAN_state_RN_data$q0046)
table(US_state_RN_data$q0046)
table(US_RN_data$q0046)
all_RN_data <- rbind.fill(UK_RN_data,UK_state_RN_data)
all_RN_data <- rbind.fill(all_RN_data,London_RN_data)
all_RN_data <- rbind.fill(all_RN_data,AUS_RN_data)
all_RN_data <- rbind.fill(all_RN_data,AUS_state_RN_data)
all_RN_data <- rbind.fill(all_RN_data,CAN_RN_data)
all_RN_data <- rbind.fill(all_RN_data,CAN_state_RN_data)
all_RN_data <- rbind.fill(all_RN_data,US_RN_data)
all_RN_data <- rbind.fill(all_RN_data,US_state_RN_data)
all_RN_data <- all_RN_data[!(all_RN_data$q0003==1),]
# RN data has responses in character form. Need to change to numerical factors before imputing
all_RN_data$q0002 <- as.character(all_RN_data$q0002)
all_RN_data$q0002[all_RN_data$q0002 == "Male"] <- 1
all_RN_data$q0002[all_RN_data$q0002 == "Female"] <- 2
all_RN_data$q0002 <- as.factor(all_RN_data$q0002)
all_RN_data$q0003 <- as.character(all_RN_data$q0003)
all_RN_data$q0003[grep('Under 60',all_RN_data$q0003)] <- 1
all_RN_data$q0003[grep('60',all_RN_data$q0003)] <- 2
all_RN_data$q0003[grep('65',all_RN_data$q0003)] <- 3
all_RN_data$q0003[grep('70',all_RN_data$q0003)] <- 4
all_RN_data$q0003[grep('75',all_RN_data$q0003)] <- 5
all_RN_data$q0003[grep('80',all_RN_data$q0003)] <- 6
all_RN_data$q0003[grep('85',all_RN_data$q0003)] <- 7
all_RN_data$q0003 <- as.factor(all_RN_data$q0003)
all_RN_data <- all_RN_data[!(all_RN_data$q0003==1),]
all_RN_data$q0010 <- as.character(all_RN_data$q0010)
all_RN_data$q0010[grep('Under',all_RN_data$q0010)] <- 1
all_RN_data$q0010[grep('39,999',all_RN_data$q0010)] <- 2
all_RN_data$q0010[grep('40,000',all_RN_data$q0010)] <- 3
all_RN_data$q0010[grep('60,000',all_RN_data$q0010)] <- 4
all_RN_data$q0010[grep('80,000',all_RN_data$q0010)] <- 5
all_RN_data$q0010[grep('More',all_RN_data$q0010)] <- 6
all_RN_data$q0010[grep('85',all_RN_data$q0010)] <- 7
all_RN_data$q0010[grep('Prefer',all_RN_data$q0010)] <- 8
all_RN_data$q0010 <- as.factor(all_RN_data$q0010)
all_RN_data <- all_RN_data[!(all_RN_data$q0010==8),]
all_RN_data$q0032 <- as.character(all_RN_data$q0032)
all_RN_data$q0032[all_RN_data$q0032 == "Yes"] <- 1
all_RN_data$q0032[all_RN_data$q0032 == "No"] <- 2
all_RN_data$q0032 <- as.factor(all_RN_data$q0032)
all_RN_data$q0042 <- as.character(all_RN_data$q0042)
all_RN_data$q0042[all_RN_data$q0042 == "Yes"] <- 1
all_RN_data$q0042[all_RN_data$q0042 == "No"] <- 2
all_RN_data$q0042 <- as.factor(all_RN_data$q0042)
all_RN_data$q0046 <- as.character(all_RN_data$q0046)
all_RN_data$q0046[grep("I do not know if I have a hearing problem",all_RN_data$q0046)] <- 1
all_RN_data$q0046[grep("I do not have any problems with my hearing and nobody has complained about my hearing",all_RN_data$q0046)] <- 2
all_RN_data$q0046[grep("I do not have any problems with my hearing but sometimes other people tell me",all_RN_data$q0046)] <- 3
all_RN_data$q0046[grep("I do have a hearing problem but I haven",all_RN_data$q0046)] <- 4
all_RN_data$q0046[grep("I do have a hearing problem and I wear hearing aids",all_RN_data$q0046)] <- 5
all_RN_data$q0046 <- as.factor(all_RN_data$q0046)
hcat_impute <- predict(boot_ormod_all,all_RN_data)
hcat_impute_test <- as.data.frame(cbind(hcat_impute,all_RN_data$country_id,all_RN_data$q0046))
table(hcat_impute_test$hcat_impute,hcat_impute_test$V2)
table(hcat_impute_test$V3,hcat_impute_test$V2)
df=(table(hcat_impute_test$V3,hcat_impute_test$V2))
df/colSums(df)
grid.table(df/colSums(df))
grid.table(df/colSums(df))
df=(table(hcat_impute_test$hcat_impute,hcat_impute_test$V2))
df/colSums(df)
grid.table(df/colSums(df))
grid.table(df/colSums(df))
df=(table(hcat_impute_test$hcat_impute,hcat_impute_test$V2))
grid.table(df/colSums(df))
grid.table(df/colSums(df))
colSums(df))
colSums(df)
df
df/colSums(df)
colSums(df)
colSums(df/colSums(df))
colSums(df)
df/colSums(df)
df
setwd("C:/Users/cwbishop/Documents/GitHub/SNR-Analysis")
HASPI_cor_ISTS <- read.csv('Master_HASPI (Aided, ISTS) 2018-12-13.csv')
HASPI_cor_ISTS <- HASPI_cor_ISTS[which(HASPI_cor_ISTS$SNR_requested=='10'|HASPI_cor_ISTS$SNR_requested=='5'),]
HASPI_cor_ISTS <- HASPI_cor_ISTS[which(HASPI_cor_ISTS$Ear.1.left.=='1'),]
sub_list <- unique(HASPI_cor_ISTS$SubId)
HASPI_cor_SPSHN <- read.csv('Master_HASPI (Aided, SPSHN) 2018-12-13.csv')
HASPI_cor_SPSHN <- HASPI_cor_SPSHN[which(HASPI_cor_SPSHN$SNR_requested=='10'|HASPI_cor_SPSHN$SNR_requested=='5'),]
HASPI_cor_SPSHN <- HASPI_cor_SPSHN[which(HASPI_cor_SPSHN$Ear.1.left.=='1'),]
View(HASPI_cor_ISTS)
length(sub_list)
for (i=1:length(sub_list)){
i
}
for (i in 1:length(sub_list)){
i
}
print(i)
for (i in 1:length(sub_list)){
print(i)
}
class(HASPI_cor_ISTS$SubId)
HASPI_cor_ISTS[which(HASPI_cor_ISTS$SubId==sub_list[i])]
HASPI_cor_ISTS[which(HASPI_cor_ISTS$SubId==sub_list[i]),]
HASPI_cor_ISTS[which(HASPI_cor_ISTS$SubId==sub_list[i])&HASPI_cor_ISTS$SNR_requested==10),]
HASPI_cor_ISTS[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10),]
HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10),]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5),]
(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10),])-(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5),])
HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)
)
HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5),]
(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10),])
HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10),]
HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]
(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)])-(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])
(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])
(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5))+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)
}
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5)
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])
)
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
(HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5)
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*3/5)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
3/5
((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*.6)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
0.374465734-0.329599165
(0.374465734-0.329599165)*.6
((0.374465734-0.329599165)*.6)+.3295
ceppcor <- as.data.frame(0)
for (i in 1:length(sub_list)){
ceppcor[i] <- ((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*.6)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
ceppcor[i]
}
View(ceppcor)
ceppcor <- as.data.frame(0)
for (i in 1:length(sub_list)){
ceppcor[i] <- ((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*.6)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
ceppcor[i,]
}
View(ceppcor)
ceppcor <- as.data.frame(0)
for (i in 1:length(sub_list)){
ceppcor[i,] <- ((HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==10)]-HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)])*.6)+HASPI_cor_ISTS$SepCorr[which(HASPI_cor_ISTS$SubId==sub_list[i]&HASPI_cor_ISTS$SNR_requested==5)]
}
View(ceppcor)
ceppcor[,2] <- sub_list
ceppcor <- ceppcor(c(2,1))
ceppcor <- ceppcor[c(2,1))]
ceppcor <- ceppcor[c(2,1)]
names(ceppcor) <- c('subid','ceppcor@8SNR')
names(ceppcor) <- c('subid','ceppcor_8SNR')
write.csv(ceppcor,paste("ceppcor_8SNR ",Sys.Date(),".csv",sep=""),row.names=F)
